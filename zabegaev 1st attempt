#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

int n;

typedef struct queue
{
    struct Node **Node;
    int i;
}queue;

typedef struct Node
{
    int data;
    struct Node *left;
    struct Node *right;
}Node;

int cmp (void const *i, const void *j)
{
    return (*(int*)i - *(int*)j);
}

Node *add (int x)
{
    Node *a = (Node*)malloc(sizeof(Node));
    a->data = x;
    a->left = NULL;
    a->right = NULL;
    return a;
}


Node *sort2(int *a, int begin, int end)
{
    if (begin > end)
        return NULL;
    int mid = begin + (end - begin) / 2;
    Node *node = add(a[mid]);
    node->left = sort2(a, begin, mid - 1);
    node->right = sort2(a, mid + 1, end);
    return node;
}

Node *create (int *a, int n)
{
    qsort(a, n, sizeof(int), cmp);
    Node *head = sort2(a, 0, n);
    return head;
}

void add_to_queue (Node *branch, queue *queue)
{
    queue->Node = realloc(queue->Node, sizeof(branch));
    queue->Node[queue->i] = branch;
    (queue->i)++;
}

int check_queue_empty (queue *queue)
{
    if (queue->Node == NULL || queue->i < 0)
        return 1;
    else
        return 0;
}

Node *take_first_from_queue (queue *queue)
{
    Node *res = malloc(sizeof(Node));
    res->left = NULL;
    res->right = NULL;
    if (queue->Node[queue->i - 1] != NULL)
    {
        res = queue->Node[queue->i - 1];
        queue->Node[queue->i - 1] = NULL;
    }
    queue->i = (queue->i) - 1;
    return res;
}

void visit (Node *x)
{
    if (x->data == 0) //почему-то иногда здесь ругается, что я залез не по адресу, не знаю как исправть
        return;
    if (x != NULL &&  x->data < 1000)
    {
        printf("%d ", x->data);
    }
    return;
}
 /*
 add_to_queue - поставить в очередь
 take_last_from_queue - взять из очереди первый добавленный элемент
 check_queue_empty - возвращает 1, если очередь пуста, иначе - 0
 visit - посетить и написать значение
*/

void bypass (Node *root)
{
    int i = 0;
    Node *x = NULL;
    queue *queue = malloc(sizeof(queue));
    queue->Node = NULL;
    queue->i = 0;
    add_to_queue(root, queue);                  // корень в очередь
    while (check_queue_empty(queue) == 0)
    {
        if (queue != NULL)
        {
            x = take_first_from_queue(queue);
            if (x != NULL)
            {
                visit(x);
                if (queue->i == 0)
                    printf("\n");
                if (x->left != NULL)
                    add_to_queue(x->left, queue);
                if (x->right != NULL)
                    add_to_queue(x->right, queue);
                i++;
            }
        }
    }
    queue = NULL;
}

void make_free_node(Node *x)
{
    if (x == NULL)
        return;
    if (x->left != NULL)
        make_free_node(x->left);
    if (x->right != NULL)
        make_free_node(x->right);
    free(x);
    return;
}

int main ()
{
    int i;
    printf("Введите кол-во элементoв: ");
    scanf("%d", &n);
    int *a = malloc(n * sizeof(int));
    for (i = 0; i < n; i++)
    {
        printf("a[%d] = ", i);
        scanf("%d", &a[i]);
    }
    Node *q = create(a, n);
    printf("\n");
    bypass(q);
    make_free_node(q);
    return 0;
}
